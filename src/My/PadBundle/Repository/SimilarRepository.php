<?php

namespace My\PadBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SimilarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SimilarRepository extends EntityRepository
{
	/** Has Competed */
	public function getCompeted($current, $artist1, $artist2)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('i')->from('My\PadBundle\Entity\Similar', 'i')
			->where('i.artistMain = ?1')->setParameter(1, $current->getId())
			->andWhere('i.artistGood = ?2')->setParameter(2, $artist1->getId())
			->andWhere('i.artistBad = ?3')->setParameter(3, $artist2->getId())
			->getQuery()
			->getResult();
		//if (count($result) === 1) return true;

//		$qb = $this->getEntityManager()->createQueryBuilder();
//		$result = $qb->select('i')->from('My\PadBundle\Entity\Similar', 'i')
//			->where('i.artista = ?1')->setParameter(1, $artist2->getId())
//			->andWhere('i.artistb = ?2')->setParameter(2, $artist1->getId())
//			->getQuery()
//			->getResult();
//		if (count($result) === 1) return true;

		return false;
	}


	/** Retrieves aritsts for selection */
	public function getSelection($current)
	{
		$data = array();
		if (!is_null($current->getArtist())) {

			$artistsSize = $this->getEntityManager()->getRepository('MyPadBundle:Artist')->getSize();

			if ($artistsSize <= 2) return $data;
			if ($current->getArtist()->getSimilared() * 2 >= max(8, $current->getArtist()->getRated())) return $data;

			for ($i=1; $i<=$artistsSize; $i++) {

				$artista = $this->getEntityManager()->getRepository('MyPadBundle:Artist')->getRandom($current->getArtist()->getId());
				$artistb = $this->getEntityManager()->getRepository('MyPadBundle:Artist')->getRandom(array($current->getArtist()->getId(), $artista->getId()));

				$competed = $this->getCompeted($current->getArtist(), $artista, $artistb);
				if (!$competed) {
					$data[] = $artista;
					$data[] = $artistb;
					break;
				}
			}
		}

		return $data;
	}


	/** Clean table */
	public function clean()
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->delete('My\PadBundle\Entity\Similar', 'i')
			->where('i.artista IS NULL')
			->orWhere('i.artistb IS NULL')
			->getQuery()
			->getResult();
	}


	/** Get Close */
	public function getClose($artist, $limit = 15)
	{
		if (is_null($artist)) return;

		$artists = array();

		// main
		if (count($artist->getSimilarsMain())) foreach ($artist->getSimilarsMain() as $similar) {
			if (!array_key_exists($similar->getArtistGood()->getName(), $artists)) {
				$artists[$similar->getArtistGood()->getName()] = 1;
			} else  $artists[$similar->getArtistGood()->getName()] += 1;
			if (!array_key_exists($similar->getArtistBad()->getName(), $artists)) {
				$artists[$similar->getArtistBad()->getName()] = -1;
			} else  $artists[$similar->getArtistBad()->getName()] -= 1;
		}

		// good
		if (count($artist->getSimilarsGood())) foreach ($artist->getSimilarsGood() as $similar) {
			if (!array_key_exists($similar->getArtistMain()->getName(), $artists)) {
				$artists[$similar->getArtistMain()->getName()] = 1;
			} else  $artists[$similar->getArtistMain()->getName()] += 1;
		}

		// bad
		if (count($artist->getSimilarsBad())) foreach ($artist->getSimilarsBad() as $similar) {
			if (!array_key_exists($similar->getArtistMain()->getName(), $artists)) {
				$artists[$similar->getArtistMain()->getName()] = -1;
			} else  $artists[$similar->getArtistMain()->getName()] -= 1;
		}

		if (!count($artists)) return;

		arsort($artists);

		$avg = array_sum($artists) / count($artists);
		foreach ($artists as $artist_name => $artist_count) {
			$std_values[] = pow($artist_count - $avg, 2);
		}
		$std = sqrt(array_sum($std_values) / count($std_values));

		foreach ($artists as $artist_name => $artist_count) {
			if ($artist_count <= ($avg + $std + $std)) unset($artists[$artist_name]);
		}

		if (empty($artists)) return;

		while (count($artists) > $limit) array_pop($artists);

		return $artists;
	}


	/** Find All By Artist */
	public function findAllByArtist($artist)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('i')->from('My\PadBundle\Entity\Similar', 'i')
			->where('i.artistMain = ?1')
			//->orWhere('i.artistb = ?1')
			->setParameters(array(1=>$artist->getId()))
			->getQuery()
			->getResult();
	}
}