<?php

namespace My\PadBundle\Repository;

use Doctrine\ORM\EntityRepository;
use My\PadBundle\Repository\SongRepository;

/**
 * AlbumRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlbumRepository extends EntityRepository
{
    /**
     * Return count of albums
     */
    public function count()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select($qb->expr()->count('b.id'))->from('MyPadBundle:Album', 'b')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /** Get json autocomplete string for jquery ui */
    public function getAutocomplete()
    {
        $albums = $this->findAll();
        if (!$albums) return;

        $list = array();
        foreach ($albums as $album) {
            if (!in_array($album->getTitle(), $list)) $list[] = json_encode($album->getTitle());
        }

        return implode(',', $list);
    }

    /** Gets Ladder */
    public function getLadder($side, $limit = 10)
    {
        if ($side == 'top') $order = 'desc';
        elseif ($side == 'low') $order = 'asc'; else throw new \Exception('unknown side: ' . $side);

        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select('b')->from('My\PadBundle\Entity\Album', 'b')
            ->where('b.rating IS NOT NULL')
            ->orderBy('b.rating', $order)
            ->addOrderBy('b.rated', $order)
            ->addOrderBy('b.modifiedAt', $order)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    /** Clean table */
    public function clean()
    {
        $removed = 0;
        $albums = $this->findAll();
        if (count($albums)) foreach ($albums as $album) {
            if ($album->getSongs()->count() == 0) {
                $this->getEntityManager()->remove($album);
                $removed++;
            }
        }

        return $removed;
    }

    /** Checks if album has the song's artist set */
    public function checkArtist($song)
    {
        if (is_null($song->getAlbum()) || is_null($song->getArtist())) return;

        $album = $song->getAlbum();
        $artist = $song->getArtist();

        if ($album->getArtist() == $artist) return;

        $albumReplace = $this->getEntityManager()->getRepository('MyPadBundle:Album')->findOneBy(array('title' => $album->getTitle(), 'artist' => $artist->getId()));
        if ($albumReplace) $song->setAlbum($albumReplace);
        else $album->setArtist($artist);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TIP
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     *  Validate Unliked and Unlistened
     *  To remove worst album
     *  Have to be at least a few months old
     *  Songs of album must not have been played in during last few months
     *  Will only pick from worst 5% rated albums
     */
    public function getAlbumToRemove()
    {
	    /** @var SongRepository $songRepo */
	    $songRepo = $this->getEntityManager()->getRepository('MyPadBundle:Song');
	    $dateCutoff = $songRepo->getAveragePlayedAt();

        $query = $this->getEntityManager()->createQuery("
    	        SELECT b
    	        FROM MyPadBundle:Album b
    	        JOIN b.songs s
    	        WHERE s.playedAt < :cutoff
    	    ")
            ->setParameters(array(
                'cutoff' => $dateCutoff->format('Y-m-d H:i:s')
            ));
        $albums = $query->getResult();
        //die(var_dump($albums));

        foreach ($albums as $album) {
            // skip unslotted albums or albums with no songs
//            if (is_null($album->getSlots()) || !$album->getSongs()->count()) {
//                continue;
//            }

            $songsUnplayed = true;
            foreach ($album->getSongs() as $song) {
                if ($song->getPlayedAt() > $dateCutoff) {
                    $songsUnplayed = false;
                }
            }

            if ($songsUnplayed) {
                $albumName = '<a href="http://en.wikipedia.org/wiki/Special:Search/' . str_replace(' ', '_', $album->getTitle()) . '" target="_newtab">' . $album->getTitle() . '</a>';

                return array(
                    'tip'      => 'Please remove ' . $albumName,
                    'entityId' => '',
                );
            }
        }

        return;
    }

    /**
     * TIP
     * Get an album that is not slotted
     */
    public function getAlbumNotSlotted()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $albums = $qb->select('b')->from('MyPadBundle:Album', 'b')
            ->where('b.slots IS NULL')
            ->orderBy('b.modifiedAt', 'DESC')
            ->getQuery()
            ->getResult();
        if (!$albums) return;

        foreach ($albums as $album) {

            // skip empty albums (will be cleaned eventually)
            if (!$album->getSongs()->count()) {
                continue;
            }

            $albumName = '<a href="http://en.wikipedia.org/wiki/Special:Search/' . str_replace(' ', '_', $album->getTitle()) . '" target="_newtab">' . $album->getTitle() . '</a>';

            return array(
                'tip'      => $album->getSongs()->count() . '/<a id="' . $album->getId() . '" class="statSlots" href="#slots">??</a> slots for ' . $albumName,
                'entityId' => ($album->getSongs()->count() ? $album->getSongs()->first()->getId() : null),
            );
        }

        return;
    }

    /**
     * Checks if albums have all their songs and are mp3s
     */
    public function isAlbumsComplete()
    {
        //$limit = ceil($this->count() * 0.05);
        $limit = ceil(sqrt($this->count()));

        $qb = $this->getEntityManager()->createQueryBuilder();
        $albums = $qb->select('b')->from('MyPadBundle:Album', 'b')
            ->where('b.slots IS NOT NULL')
            ->orderBy('b.modifiedAt', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
        if (!$albums) return;

        foreach ($albums as $album) {

            $albumName = '<a href="http://en.wikipedia.org/wiki/Special:Search/' . str_replace(' ', '_', $album->getTitle()) . '" target="_newtab">' . $album->getTitle() . '</a>';
            $albumSlots = '<a id="' . $album->getId() . '" class="statSlots" href="#slots">' . $album->getSlots() . '</a>';

            if ($album->getSlots() != $album->getSongs()->count()) {
                return array(
                    'tip'      => $albumName . ' has incomplete songs: ' . $album->getSongs()->count() . '/' . $albumSlots,
                    'entityId' => $album->getSongs()->first()->getId(),
                );
            }

            $nonmp3 = 0;
            foreach ($album->getSongs() as $song) {
                if (!in_array($song->getCodec(), array('mp3', 'm4a'))) {
                    $nonmp3++;
                }
            }
            if ($nonmp3 > 0) {
                return array(
                    'tip'      => $albumName . ' has ' . $nonmp3 . ' non-mp3 files!',
                    'entityId' => $album->getSongs()->first()->getId(),
                );
            }
        }

        return;
    }
}
